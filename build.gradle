plugins {
    id 'java'
    id 'io.qameta.allure' version '2.12.0'
    id 'com.diffplug.spotless' version '6.25.0'
}

// Apply Spotless configuration from external file
apply from: 'spotless.gradle'

allprojects {
    group = 'io.artbi.aqa.templates'
    version = '1.0-SNAPSHOT'


    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
}

ext {
    // Версії залежностей
    restAssuredVersion = '5.4.0'
    lombokVersion = '1.18.30'
    slf4jVersion = '2.0.11'
    logbackVersion = '1.4.14'
    assertjVersion = '3.25.3'
    testngVersion = '7.9.0'
    allureVersion = '2.29.1'
    jacksonVersion = '2.18.2'
    hamcrestVersion = '2.2'
    jsonVersion = '20231013'
    jsonPathVersion = '2.8.0'
    ownerVersion = '1.0.12'
    javaFakerVersion = '1.0.2'
    testcontainersVersion = '1.19.7'
}

allure {
    version = allureVersion
    autoconfigure = true
    aspectjweaver = true
    useTestNG {
        version = allureVersion
    }
}


subprojects {
    apply plugin: 'java'
    apply plugin: 'io.qameta.allure'
    apply plugin: 'com.diffplug.spotless'

    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    // Apply Spotless configuration from external file
    apply from: rootProject.file('spotless.gradle')

    dependencies {
        // API Testing
        implementation "io.rest-assured:rest-assured:${restAssuredVersion}"
        implementation "io.rest-assured:json-schema-validator:${restAssuredVersion}"
        implementation "org.hamcrest:hamcrest:${hamcrestVersion}"
        implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"

        // Base dependencies
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

        // Logging
        implementation "org.slf4j:slf4j-api:${slf4jVersion}"
        implementation "ch.qos.logback:logback-classic:${logbackVersion}"

        implementation "org.assertj:assertj-core:${assertjVersion}"

        // Test dependencies
        testImplementation "org.testng:testng:${testngVersion}"

        // Test reports
        implementation "io.qameta.allure:allure-bom:${allureVersion}"
        implementation "io.qameta.allure:allure-testng:${allureVersion}"
        implementation "io.qameta.allure:allure-rest-assured:${allureVersion}"

        // Data generation
        implementation "com.github.javafaker:javafaker:${javaFakerVersion}"
    }

    test {
        useTestNG() {
            options.parallel = 'method'
            options.threadCount = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
        }

        systemProperties System.getProperties()

        testLogging {
            events "passed", "skipped", "failed"
            showStandardStreams = true
            exceptionFormat = 'full'
        }

        test.outputs.upToDateWhen { false }

        // Set allure results directory as a JVM argument instead of a system property
        jvmArgs "-Dallure.results.directory=${layout.buildDirectory.get()}/allure-results"
    }
}

project(':common') {
    dependencies {
        // JSON
        implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
        implementation "org.json:json:${jsonVersion}"
        implementation "com.jayway.jsonpath:json-path:${jsonPathVersion}"

        // Configuration
        implementation "org.aeonbits.owner:owner:${ownerVersion}"
    }
}

project(':petstore-api-tests') {
    dependencies {
        implementation project(':common')

        // Testcontainers
        testImplementation "org.testcontainers:testcontainers:${testcontainersVersion}"

        // Configuration
        implementation "org.aeonbits.owner:owner:${ownerVersion}"
    }

    // Add task for running API tests only
    task apiTests(type: Test) {
        description = 'Runs the API tests'
        group = 'verification'

        useTestNG() {
            // API test settings
            options.suites 'petstore-api-tests/src/test/resources/testng.xml'
        }
    }
}

// Add task for running all tests from different modules
task allTests {
    description = 'Run all tests from all subprojects'
    group = 'verification'

    dependsOn subprojects.collect { it.tasks.withType(Test) }
}

// Add task for cleaning Allure reports before each run
task cleanAllureResults(type: Delete) {
    description = 'Clean Allure results directory'
    group = 'reporting'

    delete fileTree(dir: 'build/allure-results')
    delete fileTree(dir: 'build/allure-report')
}
